// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    clerkId   String   @unique
    email     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    profile      Profile?
    dailyGoals   DailyGoal[]
    proteinEntries ProteinEntry[]
    presetMeals  PresetMeal[]

    @@index([clerkId])
    @@index([email])
}

model Profile {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String?
    weight      Float?   // in kg
    height      Float?   // in cm
    age         Int?
    activityLevel String? // sedentary, lightly_active, moderately_active, very_active, extremely_active
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model DailyGoal {
    id          String   @id @default(cuid())
    userId      String
    targetProtein Float  // in grams
    date        DateTime @db.Date
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, date])
    @@index([userId, date])
}

model ProteinEntry {
    id          String   @id @default(cuid())
    userId      String
    amount      Float    // protein in grams
    mealName    String?  // e.g., "Breakfast", "Lunch", "Snack"
    description String?  // e.g., "Chicken breast with rice"
    date        DateTime @db.Date
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, date])
    @@index([date])
}

model PresetMeal {
    id          String   @id @default(cuid())
    userId      String
    name        String   // e.g., "Chicken Breast"
    proteinAmount Float  // in grams
    description String?  // e.g., "Grilled chicken breast"
    isPublic    Boolean  @default(false) // Allow sharing common meals
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([isPublic])
}
